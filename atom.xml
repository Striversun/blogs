<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunvin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://striver.com.cn/"/>
  <updated>2018-12-14T12:13:18.656Z</updated>
  <id>http://striver.com.cn/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang中下划线的意义</title>
    <link href="http://striver.com.cn/2018/12/14/golang%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://striver.com.cn/2018/12/14/golang中下划线的意义/</id>
    <published>2018-12-14T07:37:31.000Z</published>
    <updated>2018-12-14T12:13:18.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用在import"><a href="#用在import" class="headerlink" title="用在import"></a>用在import</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  _  <span class="string">"net/http/pprof"</span></span><br></pre></td></tr></table></figure><p>引入包时，会先调用包中的初始化函数，这种使用方式仅让导入的包做初始化，而不使用包中其他功能<br><a id="more"></a></p><h2 id="用在返回值"><a href="#用在返回值" class="headerlink" title="用在返回值"></a>用在返回值</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> Slice&#123;&#125;</span><br><span class="line"></span><br><span class="line">_,err := <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>表示忽略某个值。单函数有多个返回值，用来获取某个特定的值</p><h2 id="用在变量"><a href="#用在变量" class="headerlink" title="用在变量"></a>用在变量</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> _ X = T&#123;&#125;</span><br><span class="line"><span class="comment">//其中 I为interface</span></span><br></pre></td></tr></table></figure><p>上面用来判断 type T是否实现了X,用作类型断言，如果T没有实现接口X，则编译错误.</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>下面代码的作用是保证结构体HelloServiceClient实现了接口HelloServiceInterface<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ HelloServiceInterface = (*HelloServiceClient)(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><p>下面代码声明的HelloServiceInterface既是变量又是类型<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HelloServiceInterface = <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello(request <span class="keyword">string</span>, reply *<span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用在import&quot;&gt;&lt;a href=&quot;#用在import&quot; class=&quot;headerlink&quot; title=&quot;用在import&quot;&gt;&lt;/a&gt;用在import&lt;/h2&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;  _  &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引入包时，会先调用包中的初始化函数，这种使用方式仅让导入的包做初始化，而不使用包中其他功能&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://striver.com.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>http协议整理</title>
    <link href="http://striver.com.cn/2018/09/07/http/"/>
    <id>http://striver.com.cn/2018/09/07/http/</id>
    <published>2018-09-07T06:39:12.000Z</published>
    <updated>2018-12-14T07:27:26.188Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP(Hyper Text Transfer Protocal)超文本传输协议。主要是用来在客户端和服务器之间传递数据（包括但不限于文本、图片、音频）的协议。它基于TCP/IP通信协议来传递数据，也就是说http的传输需要先建立tcp连接。那么为什么不用TCP直接传输数据还要在封装一层呢？我想这就是http属于应用层协议的原因吧，tcp协议属于传输层协议，使用tcp需要声明socket，绑定端口，监听端口…等复杂操作，而作为应用层，我们应该关注的更多的是数据有没有到达和返回，所以没有必要在底层的协议上浪费时间。<br><a id="more"></a></p><h1 id="http结构"><a href="#http结构" class="headerlink" title="http结构"></a>http结构</h1><p>http协议分为请求和响应。</p><h2 id="http请求和响应结构"><a href="#http请求和响应结构" class="headerlink" title="http请求和响应结构"></a>http请求和响应结构</h2><p>我们可以把http请求和响应分别看做4个部分：<br><br>http请求：请求行，请求头，空行和请求数据。<br><br>http响应：状态行、响应头、空行和响应数据。<br><br>其中空行用于分割http头部和传输数据；请求数据和响应数据依托具体业务，本文不展开讨论。</p><h3 id="请求行："><a href="#请求行：" class="headerlink" title="请求行："></a>请求行：</h3><p>形如<code>GET /index.html HTTP/1.1</code><br>分别对应请求方法，请求内容和http版本。</p><h4 id="http版本"><a href="#http版本" class="headerlink" title="http版本"></a>http版本</h4><h5 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h5><p>这是HTTP最早大规模使用的版，现已过时。在这个版本中 只有GET一种请求方法，在HTTP通讯也没有指定版本号，也不支持请求头信息。该版本不支持POST等方法，因此客户端向服务器传递信息的能力非常有限。HTTP/0.9的请求只有如下一行：<br><code>GET www.baidu.com</code></p><h5 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h5><p>这个版本是第一个在HTTP通讯中指定版本号的协议版本，HTTP/1.0至今仍被广泛采用，特别是在代理服务器中。<br>HTTP/1.0支持：GET、POST、HEAD三种HTTP请求方法。</p><h5 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h5><p>HTTP/1.1是当前正在使用的版本。该版本默认采用持久连接，并能很好地配合代理服务器工作。还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。<br>HTTP/1.1新增了：OPTIONS、PUT、DELETE、TRACE、CONNECT五种HTTP请求方法。</p><h5 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h5><p>这个版本是最新发布的版本，于2015年5月做HTTP标准正式发布。http/2在请求方法上未做改变，在数据传输上增加了二进制分帧、多路复用、服务器推送、头部压缩等一系列特性。</p><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>按照RESTful规范，各请求方法使用如下：<br><br>GET（SELECT）：从服务器取出资源（一项或多项）。<br><br>POST（CREATE）：在服务器新建一个资源。<br><br>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。<br><br>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。<br><br>DELETE（DELETE）：从服务器删除资源。<br></p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>形如<code>http/1.1 200 ok</code><br>分别对应http版本及状态码。常见的状态码：<br><br>200 - 请求成功<br><br>301 - 资源（网页等）被永久转移到其它URL<br><br>404 - 请求的资源（网页等）不存在<br><br>500 - 内部服务器错误<br><br><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">详细状态码</a>。</p><h3 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h3><p>包含但不限于以下各项：<br><br>Accept：声明客户端可以接收什么类型的数据，内容参见<a href="http://en.wikipedia.org/wiki/MIME_type" target="_blank" rel="noopener">MIME</a><br><br>Cookie:用于标记服务器端session。<br><br>Referer：引用，标记这条请求是从何处跳转过来的。<br><br>Cache-Control：标记是否接收缓存数据。<br></p><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p>具体可参见<a href="http://www.runoob.com/http/http-header-fields.html" target="_blank" rel="noopener">HTTP 响应头信息</a><br>空行和响应数据参考请求部分。</p><p>很多博客上说http是无连接、无状态的协议，这又是什么意思呢？无连接这个说法不太严谨，它是说http协议每次连接只处理一个请求，请求处理结束，连接断开。针对这个问题，http1.0请求头部已经增加了Connection:Keep-Alive用于声明这条连接处理完请求之后继续保持，当然在http1.1的时候官方修改为Keep-Alive:true or Keep-Alive:false，用于表示是否保持连接。无状态的意思是说http协议无论是否保持这条连接，其处理的请求是不记录上下文状态的，换句话就是说：你忙你的，我忙我的，相互之间没关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP(Hyper Text Transfer Protocal)超文本传输协议。主要是用来在客户端和服务器之间传递数据（包括但不限于文本、图片、音频）的协议。它基于TCP/IP通信协议来传递数据，也就是说http的传输需要先建立tcp连接。那么为什么不用TCP直接传输数据还要在封装一层呢？我想这就是http属于应用层协议的原因吧，tcp协议属于传输层协议，使用tcp需要声明socket，绑定端口，监听端口…等复杂操作，而作为应用层，我们应该关注的更多的是数据有没有到达和返回，所以没有必要在底层的协议上浪费时间。&lt;br&gt;
    
    </summary>
    
    
      <category term="protocol" scheme="http://striver.com.cn/tags/protocol/"/>
    
  </entry>
  
  <entry>
    <title>微服务简单介绍（一）</title>
    <link href="http://striver.com.cn/2018/09/01/MicroService-1/"/>
    <id>http://striver.com.cn/2018/09/01/MicroService-1/</id>
    <published>2018-09-01T10:30:18.000Z</published>
    <updated>2018-09-02T19:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#8194;&#8194;&#8194;微服务，顾名思义，微小的服务，主要用于处理一个或是一组业务，独立运行，独立部署。相比于集成化的大而全的架构，他更加灵活，开发起来更加快捷，逻辑简单，结构清晰，更能体现出高内聚，松耦合的架构原则。微服务采用C/S架构模式，客户端与服务端之间通过轻量级的通信机制GRPC进行通信，支持不同语言间服务调用。有关微服务架构的优缺点请移步<a href="http://dockone.io/article/394" target="_blank" rel="noopener">微服务架构的优势与不足</a>。目前相对成熟的微服务框架有很多，一般情况下我们是没有必要重复造轮子的。使用不同的框架，其服务端和客户端实现略有不同。如<a href="https://github.com/go-kit/kit" target="_blank" rel="noopener">go-kit</a>和<a href="https://github.com/micro/go-micro" target="_blank" rel="noopener">go-micro</a>。后面我们会进一步介绍。<br><a id="more"></a></p><h2 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h2><p>&#8194;&#8194;&#8194;GRPC是Google公司基于Protobuf开发的跨语言的开源RPC框架。GRPC基于HTTP/2协议设计，可以基于一个HTTP/2链接提供多个服务，对于移动设备更加友好。翻译成人话就是GRPC是google实现的一套RPC框架。rpc(remote procedure call)远程过程调用，可以把它理解成一种特殊的通信机制。之前看过一篇文章是这么说的：网络通信使用tcp/ip建立连接，但是每次连接需要手写socket造成冗杂低效，于是我们根据每个应用封装了不同的网络协议，如http，ftp。随着技术的发展提供大量的http接口也变成了一种负担，于是就有了rpc。也就是说rpc是对一系列网络协议的封装。当然，go语言内置包有rpc的实现net/rpc，我们可以基于它重复造轮子。<br>&#8194;&#8194;&#8194;每个微服务有自己独立的代码库，各自之间在通信时需要高效的协议，要遵循一定的数据结构来解析和编码要传输的数据，在微服务中常使用 <a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">protobuf</a> 来定义。protobuf是Google公司开发的一种数据描述语言，同时也是一种协议，它根据我们定义的.proto文件的内容，通过工具生成我们需要使用的数据结构和相关的方法。客户端和服务端各自基于protobuf生成相关的代码，如果使用的是同一种语言开发可以将生成的代码公用，减少冗余。</p><h2 id="定义通信规则"><a href="#定义通信规则" class="headerlink" title="定义通信规则"></a>定义通信规则</h2><h3 id="定义user-proto文件"><a href="#定义user-proto文件" class="headerlink" title="定义user.proto文件"></a>定义user.proto文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;// 指定语法格式，注意 proto3 不再支持 proto2 的 required 和 optional</span><br><span class="line">package proto;// 指定生成的 user.pb.go 的包名，防止命名冲突</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// service 定义开放调用的服务，即 UserInfoService 微服务</span><br><span class="line">service UserInfoService &#123;</span><br><span class="line">    // rpc 定义服务内的 GetUserInfo 远程调用</span><br><span class="line">    rpc GetUserInfo (UserRequest) returns (UserResponse) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// message 对应生成代码的 struct</span><br><span class="line">// 定义客户端请求的数据格式</span><br><span class="line">message UserRequest &#123;</span><br><span class="line">// [修饰符] 类型 字段名 = 标识符;</span><br><span class="line">string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义服务端响应的数据格式</span><br><span class="line">message UserResponse &#123;</span><br><span class="line">    int32 id = 1;</span><br><span class="line">    string name = 2;</span><br><span class="line">    int32 age = 3;</span><br><span class="line">    repeated string title = 4;// repeated 修饰符表示字段是可变数组，即 slice 类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>&#8194;&#8194;&#8194;protoc可以从<a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a> 下载，自行解压安装。Protobuf核心的工具集是C++语言开发的，在官方的protoc编译器中并不支持Go语言，所以还需要使用命令go get github.com/golang/protobuf/protoc-gen-go 安装相应的插件。安装完成之后，可以通过以下命令编译生成代码。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=plugins=grpc:. ./user.proto </span><br><span class="line">//生成go相关代码使用 --go_out ,生成python代码就是 --python_out</span><br><span class="line">//plugins=grpc表示生成grpc相关代码，如果是自定义了代码生成插件可以改成相应的插件名，如--go_out=plugins=doggrpc:.</span><br><span class="line">//--go_out=plugins=grpc:.中"."表示生成到当前目录 ./user.proto是我们定义的文件</span><br></pre></td></tr></table></figure></p><p>生成代码如下：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proto</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">context <span class="string">"golang.org/x/net/context"</span></span><br><span class="line">grpc <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求结构</span></span><br><span class="line"><span class="keyword">type</span> UserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为字段自动生成的 Getter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *UserRequest)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> m != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m.Name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应结构</span></span><br><span class="line"><span class="keyword">type</span> UserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="keyword">int32</span>    <span class="string">`protobuf:"varint,1,opt,name=id" json:"id,omitempty"`</span></span><br><span class="line">Name  <span class="keyword">string</span>   <span class="string">`protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`</span></span><br><span class="line">Age   <span class="keyword">int32</span>    <span class="string">`protobuf:"varint,3,opt,name=age" json:"age,omitempty"`</span></span><br><span class="line">Title []<span class="keyword">string</span> <span class="string">`protobuf:"bytes,4,rep,name=title" json:"title,omitempty"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端需实现的接口</span></span><br><span class="line"><span class="keyword">type</span> UserInfoServiceClient <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端需实现的接口</span></span><br><span class="line"><span class="keyword">type</span> UserInfoServiceServer <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserInfo(context.Context, *UserRequest) (*UserResponse, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将微服务注册到 grpc </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterUserInfoServiceServer</span><span class="params">(s *grpc.Server, srv UserInfoServiceServer)</span></span> &#123;</span><br><span class="line">s.RegisterService(&amp;_UserInfoService_serviceDesc, srv)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> _<span class="title">UserInfoService_GetUserInfo_Handler</span><span class="params">(srv <span class="keyword">interface</span>&#123;&#125;, ctx context.Context, dec <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span>, <span class="title">interceptor</span> <span class="title">grpc</span>.<span class="title">UnaryServerInterceptor</span>) <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure></p><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务端实现约定的接口</span></span><br><span class="line"><span class="keyword">type</span> UserInfoService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> u = UserInfoService&#123;&#125;</span><br><span class="line"><span class="comment">// 实现 interface</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *UserInfoService)</span> <span class="title">GetUserInfo</span><span class="params">(ctx context.Context, req *pb.UserRequest)</span> <span class="params">(resp *pb.UserResponse, err error)</span></span> &#123;</span><br><span class="line">name := req.Name</span><br><span class="line"><span class="comment">// 模拟在数据库中查找用户信息</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"zhiwei"</span> &#123;</span><br><span class="line">resp = &amp;pb.UserResponse&#123;</span><br><span class="line">Id:    <span class="number">007</span>,</span><br><span class="line">Name:  name,</span><br><span class="line">Age:   <span class="number">20</span>,</span><br><span class="line">Title: []<span class="keyword">string</span>&#123;<span class="string">"Programer"</span>, <span class="string">"Gopher"</span>&#125;, <span class="comment">// repeated 字段是 slice 类型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">err = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">port := <span class="string">":65532"</span></span><br><span class="line">conn, err := net.Listen(<span class="string">"tcp"</span>, port)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"listen error: %v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"listen %s\n"</span>, port)</span><br><span class="line">s := grpc.NewServer()</span><br><span class="line">    <span class="comment">// 将 UserInfoService 注册到 gRPC</span></span><br><span class="line">    <span class="comment">// 注意第二个参数 UserInfoServiceServer 是接口类型的变量</span></span><br><span class="line"><span class="comment">// 需要取地址传参</span></span><br><span class="line">pb.RegisterUserInfoServiceServer(s, &amp;u)</span><br><span class="line">    s.Serve(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (...)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := grpc.Dial(<span class="string">":65532"</span>, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"dial error: %v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化 UserInfoService 微服务的客户端</span></span><br><span class="line">client := pb.NewUserInfoServiceClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用服务</span></span><br><span class="line">req := <span class="built_in">new</span>(pb.UserRequest)</span><br><span class="line">req.Name = <span class="string">"zhiwei"</span></span><br><span class="line">resp, err := client.GetUserInfo(context.Background(), req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"resp error: %v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Recevied: %v\n"</span>, resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个简单的微服务的实现分为3个部分：<br><br><b>1. 定义通信规则。</b><br><br>使用protobuf定义服务的接口和使用的数据结构，然后通过编译生成需要的代码和方法。<br><br><b>2.实现服务端</b><br><br>监听端口–实例化服务端–注册微服务–启动服务端<br><br><b>3.实现客户端</b><br><br>建立连接–实例化服务端–调用接口</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8194;&amp;#8194;&amp;#8194;微服务，顾名思义，微小的服务，主要用于处理一个或是一组业务，独立运行，独立部署。相比于集成化的大而全的架构，他更加灵活，开发起来更加快捷，逻辑简单，结构清晰，更能体现出高内聚，松耦合的架构原则。微服务采用C/S架构模式，客户端与服务端之间通过轻量级的通信机制GRPC进行通信，支持不同语言间服务调用。有关微服务架构的优缺点请移步&lt;a href=&quot;http://dockone.io/article/394&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微服务架构的优势与不足&lt;/a&gt;。目前相对成熟的微服务框架有很多，一般情况下我们是没有必要重复造轮子的。使用不同的框架，其服务端和客户端实现略有不同。如&lt;a href=&quot;https://github.com/go-kit/kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go-kit&lt;/a&gt;和&lt;a href=&quot;https://github.com/micro/go-micro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go-micro&lt;/a&gt;。后面我们会进一步介绍。&lt;br&gt;
    
    </summary>
    
    
      <category term="microservice" scheme="http://striver.com.cn/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库（一）</title>
    <link href="http://striver.com.cn/2018/06/25/RDBMS_1/"/>
    <id>http://striver.com.cn/2018/06/25/RDBMS_1/</id>
    <published>2018-06-24T18:06:32.000Z</published>
    <updated>2018-09-01T10:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql（RDBMS,relational database management system）关系型数据库管理系统。<br><a id="more"></a></p><h3 id="四大基本操作：-CURD-（Create、Retrieve、Update、Delete）"><a href="#四大基本操作：-CURD-（Create、Retrieve、Update、Delete）" class="headerlink" title="四大基本操作： CURD （Create、Retrieve、Update、Delete）"></a>四大基本操作： CURD （Create、Retrieve、Update、Delete）</h3><p> 创建、检索、更新、删除，习惯上我们叫增、删、改、查。</p><h4 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h4><h5 id="库操作："><a href="#库操作：" class="headerlink" title="库操作："></a>库操作：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名；</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> DB;</span><br></pre></td></tr></table></figure><h5 id="表操作："><a href="#表操作：" class="headerlink" title="表操作："></a>表操作：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line">字段名1 数据类型,</span><br><span class="line">字段名2 数据类型</span><br><span class="line">...</span><br><span class="line">）[存储引擎][字符集]；</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table test（</span><br><span class="line">ID int,</span><br><span class="line">name varchar(15)</span><br><span class="line">...</span><br><span class="line">）;</span><br></pre></td></tr></table></figure><h5 id="数据操作："><a href="#数据操作：" class="headerlink" title="数据操作："></a>数据操作：</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql（RDBMS,relational database management system）关系型数据库管理系统。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://striver.com.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
